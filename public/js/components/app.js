var listStore=[],listAction={},listComp=React.createClass({displayName:"listComp",getInitialState:function(){var e={listData:[],listFilterText:"",listFilterStatus:"",listLoaded:!1,listLoadError:!1,listLastSort:"seriesTitle",listLastOrder:"asc"};return e},shouldComponentUpdate:function(e,t){return t===this.state?!1:!0},componentDidMount:function(){PubSub.subscribe(constants.DATA_CHANGE,this.initList),PubSub.subscribe(constants.LIST_ERROR,this.errList)},initList:function(){this.state.listLoaded||this.setState({listLoaded:!0})},sortList:function(e,t){e||(e="series_title"),this.state.listLastSort===e&&(!t||(typeof t).indexOf("object")>-1)?t="asc"===this.state.listLastOrder?"desc":"asc":t||(t="asc");var s=listStore;s=keysort(s,"itemStatus, "+e+" "+t+", series_title"),this.setState({listData:s,listLastSort:e,listLastOrder:t})},render:function(){return React.DOM.div(null)}}),loginForm=React.createClass({displayName:"loginForm",logIn:function(){$(this.refs.loginForm.getDOMNode()).submit()},render:function(){return React.DOM.form({id:"login-form",className:"logreg-form",ref:"loginForm",method:"post",action:"/login"},React.DOM.div({id:"logreg-form-logo"}),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({className:"logreg-legend"},"Username"),React.DOM.input({className:"logreg-input",type:"text",name:"username",tabIndex:"1"})),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({className:"logreg-legend"},"Password ",React.DOM.a({className:"logreg-legend-link",href:"/forgot"},"Forgot your Password?")),React.DOM.input({id:"logreg-password-input",className:"logreg-input",type:"password",name:"password",tabIndex:"2"})),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({id:"logreg-submit",onClick:this.logIn},"Log in")),React.DOM.div({className:"logreg-section-wrap"},React.DOM.a({className:"logreg-link",href:"/register"},"or Register for Free")))}}),mountNode=document.getElementById("login-form-wrap");mountNode&&React.renderComponent(loginForm(null),mountNode);var cx=React.addons.classSet,pickerApp=React.createClass({displayName:"pickerApp",propTypes:{seriesData:React.PropTypes.object,pickerStatus:React.PropTypes.bool,pickerProgress:React.PropTypes.bool,pickerRating:React.PropTypes.bool},getInitialState:function(){return{itemStatus:"Current",itemProgress:"",itemRating:"",statusMenuVisible:!1}},componentDidMount:function(){this.props.itemData&&this.setState(this.props.itemData)},setStatus:function(e){this.setState({statusMenuVisible:!1,itemStatus:e.target.innerText})},toggleStatusMenu:function(){this.setState({statusMenuVisible:!this.state.statusMenuVisible})},setProgress:function(e){isNaN(e.target.value)||!(e.target.value<=this.props.seriesData.series_episodes_total)&&this.props.seriesData.series_episodes_total||this.setState({itemProgress:e.target.value})},render:function(){return React.DOM.div({className:"picker-wrap"},React.DOM.div({className:"picker-status-wrap"},React.DOM.div({className:cx({"picker-status-val":!0,visible:this.state.statusMenuVisible}),onClick:this.toggleStatusMenu},this.state.itemStatus,React.DOM.div({className:cx({"picker-status-dd-icon":!0,"icon-down-open":!this.state.statusMenuVisible,"icon-up-open":this.state.statusMenuVisible})}),React.DOM.div({className:"picker-status-legend"},"(Status)")),React.DOM.div({className:cx({"picker-status-dd":!0,visible:this.state.statusMenuVisible})},["Current","Completed","Planned","On Hold","Dropped"].map(function(e){return React.DOM.div({className:"picker-status-dd-item",onClick:this.setStatus},e)}.bind(this)))),React.DOM.div({className:"picker-progress-wrap"},React.DOM.div({className:"picker-input-title"},"Progress"),React.DOM.input({type:"text",maxLength:"3",value:this.state.itemProgress,onChange:this.setProgress}),React.DOM.div({className:"picker-input-sep"},"of"),React.DOM.div({className:"picker-input-total"},this.props.seriesData.series_episodes_total)),React.DOM.div({className:"picker-rating-wrap"}))}}),registerForm=React.createClass({displayName:"registerForm",getInitialState:function(){return{usernameVal:"",usernameValid:null,passwordVal:"",emailVal:"",emailValid:null}},usernameChange:function(e){e.persist(),this.setState({usernameVal:e.target.value.replace(/\W+/g,""),usernameValid:""!==e.target.value.trim()&&e.target.value.length>=3&&e.target.value.length<=40?"loading":""!==e.target.value.trim()?!1:null}),e.target.value.length>=3&&this.validateUsername(e)},passwordChange:function(e){this.setState({passwordVal:e.target.value})},emailChange:function(e){e.persist(),this.setState({emailVal:e.target.value.trim(),emailValid:""!==e.target.value.trim()?"loading":null}),this.validateEmail(e)},registerAccount:function(){this.state.emailValid!==!1&&this.state.usernameValid!==!1&&this.state.passwordVal.length>=6&&this.state.usernameVal.length>=3?$.ajax({type:"post",url:"/api/register",data:$(this.refs.registerForm.getDOMNode()).serialize(),success:function(e){console.log(e)},error:function(e){console.log(e)}}):alert("check the damn form")},validateUsername:_.debounce(function(e){return""===e.target.value?this.setState({usernameValid:null}):($.ajax({type:"post",url:"/api/validate/username",data:{username:e.target.value},success:function(e){console.log(e),this.setState({usernameValid:e.is_valid===!0&&e.exists===!1})}.bind(this),error:function(e){console.log(e)}}),void 0)},500),validateEmail:_.debounce(function(e){return""===e.target.value?this.setState({emailValid:null}):($.ajax({type:"post",url:"/api/validate/email",data:{email:e.target.value},success:function(e){console.log(e),this.setState({emailValid:e.is_valid===!0&&e.exists===!1})}.bind(this),error:function(e){console.log(e)}}),void 0)},500),render:function(){return React.DOM.form({id:"register-form",className:"logreg-form",ref:"registerForm"},React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({id:"logreg-form-hd"},"Let's get this started.")),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({className:"logreg-legend"},"Username ",React.DOM.div({className:"logreg-legend-desc"},"At least ",React.DOM.b(null,"3")," chars. Only letters/numbers.")),React.DOM.input({className:"logreg-input",type:"text",name:"username",value:this.state.usernameVal,onChange:this.usernameChange}),React.DOM.div({className:React.addons.classSet({"icon-spam":this.state.usernameValid===!1,"icon-check":this.state.usernameValid===!0,"icon-ellipsis":"loading"===this.state.usernameValid,"logreg-input-validate":!0,visible:null!==this.state.usernameValid})})),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({className:"logreg-legend"},"Password ",React.DOM.div({className:"logreg-legend-desc"},"At least ",React.DOM.b(null,"6")," chars. Keep this secure.")),React.DOM.input({id:"logreg-password-input",className:"logreg-input",type:"password",name:"password",value:this.state.passwordVal,onChange:this.passwordChange}),React.DOM.div({className:React.addons.classSet({"icon-spam":0<this.state.passwordVal.length&&this.state.passwordVal.length<6,"icon-check":this.state.passwordVal.length>=6,"logreg-input-validate":!0,visible:this.state.passwordVal})})),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({className:"logreg-legend"},"Email ",React.DOM.div({className:"logreg-legend-desc"},React.DOM.b(null,"Optional"),". You can add/remove it later.")),React.DOM.input({className:"logreg-input",type:"text",name:"email",value:this.state.emailVal,onChange:this.emailChange}),React.DOM.div({className:React.addons.classSet({"icon-spam":this.state.emailValid===!1,"icon-check":this.state.emailValid===!0,"icon-ellipsis":"loading"===this.state.emailValid,"logreg-input-validate":!0,visible:null!==this.state.emailValid})})),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({id:"logreg-form-desc"},"Most of Herro's features do not require that you have an email. However, if you forget your login credentials you will be shit out of luck.")),React.DOM.div({className:"logreg-section-wrap"},React.DOM.div({id:"logreg-submit",onClick:this.registerAccount},"Create My Account")),React.DOM.div({className:"logreg-section-wrap"},React.DOM.a({className:"logreg-link",href:"/login"},"Already registered?")))}}),mountNode=document.getElementById("register-form-wrap");mountNode&&React.renderComponent(registerForm(null),mountNode);var searchApp=React.createClass({displayName:"searchApp",getInitialState:function(){var e={searchText:$("#search-page-query").text().trim(),searchResults:[]};return e},componentDidMount:function(){this.state.searchText&&this.search()},onSearch:function(e){this.setState({searchText:e.target.value||""}),""!==e.target.value?this.search():this.setState({searchResults:[]})},search:_.debounce(function(){$.ajax({type:"get",url:"/api/anime/search/"+this.state.searchText,success:function(e){this.setState({searchResults:e})}.bind(this),error:function(e){console.log(e)}})},300),onEsc:function(e){"Escape"===e.key&&this.setState({searchText:"",searchResults:[]})},render:function(){return React.DOM.div({id:"search-page"},React.DOM.div({id:"search-input-wrap"},React.DOM.input({id:"search-input",type:"text",placeholder:"Type to search...",value:this.state.searchText,onChange:this.onSearch,onKeyUp:this.onEsc})),React.DOM.div({id:"search-results-wrap"},this.state.searchResults.map(function(e){return searchItem({seriesData:e,key:e._id})})))}}),searchItem=React.createClass({displayName:"searchItem",render:function(){var e={backgroundImage:"url("+this.props.seriesData.series_image_reference+")"};return React.DOM.div({className:"search-result"},React.DOM.div({className:"search-result-image",style:e}),React.DOM.div({className:"search-result-content"},React.DOM.div({className:"search-result-title-wrap"},React.DOM.div({className:"search-result-title"},this.props.seriesData.series_title_main),React.DOM.div({className:"search-result-year"},this.props.seriesData.series_date_start?new Date(this.props.seriesData.series_date_start).getFullYear():"")),React.DOM.div({className:"search-result-desc"},this.props.seriesData.series_description),React.DOM.div({className:"search-result-meta-wrap"},React.DOM.span({className:"search-result-meta"},React.DOM.span({className:"search-result-type"},this.props.seriesData.series_type)," with ",this.props.seriesData.series_episodes_total," Episode(s)"),pickerApp({seriesData:this.props.seriesData,pickerStatus:!0,pickerProgress:!0,pickerRating:!0}))))}});React.renderComponent(searchApp(null),document.getElementById("search-page-wrap"));